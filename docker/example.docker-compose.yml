version: '2'
services:
  # This has 2 ElasticSearch nodes. Scale as necessary to additional nodes.
  elasticsearch1:
      image: docker.elastic.co/elasticsearch/elasticsearch:5.4.0
      container_name: elasticsearch1
      logging:
          driver: json-file
          options:
              max-size: ${DOCKER_LOG_MAX_SIZE}
              max-file: ${DOCKER_LOG_MAX_FILE}
      ulimits:
        memlock:
          soft: -1
          hard: -1
      # This value is suitable for dev. Set higher for production.
      mem_limit: ${ES_MEM_LIMIT}
      volumes:
        - ${TWEETSETS_DATA_PATH}/elasticsearch/esdata1:/usr/share/elasticsearch/data
      networks:
        - tweetsets
      environment:
        - cluster.name=tweetsets-cluster
        - bootstrap.memory_lock=true
        - "ES_JAVA_OPTS=-Xms${ES_JAVA_MEM} -Xmx${ES_JAVA_MEM}"
        - xpack.security.enabled=false
        - TZ
      restart: always
  elasticsearch2:
      image: docker.elastic.co/elasticsearch/elasticsearch:5.4.0
      container_name: elasticsearch2
      logging:
          driver: json-file
          options:
              max-size: ${DOCKER_LOG_MAX_SIZE}
              max-file: ${DOCKER_LOG_MAX_FILE}
      ulimits:
        memlock:
          soft: -1
          hard: -1
      # This value is suitable for dev. Set higher for production.
      mem_limit: ${ES_MEM_LIMIT}
      volumes:
        - ${TWEETSETS_DATA_PATH}/elasticsearch/esdata2:/usr/share/elasticsearch/data
      networks:
        - tweetsets
      environment:
        - cluster.name=tweetsets-cluster
        - bootstrap.memory_lock=true
        - "ES_JAVA_OPTS=-Xms${ES_JAVA_MEM} -Xmx${ES_JAVA_MEM}"
        - "discovery.zen.ping.unicast.hosts=elasticsearch1"
        - xpack.security.enabled=false
        - TZ
      restart: always
  redis:
      image: redis:3.0.7
      logging:
          driver: json-file
          options:
              max-size: ${DOCKER_LOG_MAX_SIZE}
              max-file: ${DOCKER_LOG_MAX_FILE}
      command: --appendonly yes
      volumes:
          - ${TWEETSETS_DATA_PATH}/redis:/data
      networks:
        - tweetsets
      environment:
       - TZ
      restart: always
  # For production
  server:
      image: justinlittman/tweetsets-server
#      build:
#          context: ..
#          dockerfile: Dockerfile-server
      logging:
          driver: json-file
          options:
              max-size: ${DOCKER_LOG_MAX_SIZE}
              max-file: ${DOCKER_LOG_MAX_FILE}
      links:
        - redis:redis
        - elasticsearch1:elasticsearch
      ports:
          - ${SERVER_PORT}:8080
      volumes:
        - ${TWEETSETS_DATA_PATH}/datasets:/tweetsets_data/datasets
        # Link in a file containing a message to be displayed on dataset list page, e.g., for other
        # collections that are available, but not loaded.
        - "./dataset_list_msg.txt:/opt/tweetsets/dataset_list_msg.txt"
      networks:
        - tweetsets
      environment:
        - SECRET_KEY=${SERVER_SECRET_KEY}
        - TZ
        - SERVER_MODE
        - IP_RANGE
        # For ngninx-proxy
        - VIRTUAL_HOST=${HOSTNAME}
        - VIRTUAL_PORT=${SERVER_PORT}
        # For email
        - EMAIL_PORT
        - EMAIL_SMTP
        - EMAIL_FROM
        - EMAIL_USERNAME
        - EMAIL_PASSWORD
        - ADMIN_EMAIL
        - USE_TLS
        - HOST=${HOSTNAME}
      restart: always
  # For development
#  server-flaskrun:
      image: justinlittman/tweetsets-flaskrun
##      build:
##          context: ..
##          dockerfile: Dockerfile-flaskrun
#      logging:
#          driver: json-file
#          options:
#              max-size: ${DOCKER_LOG_MAX_SIZE}
#              max-file: ${DOCKER_LOG_MAX_FILE}
#      links:
#        - redis:redis
#        - elasticsearch1:elasticsearch
#      ports:
#          - ${SERVER_PORT}:5000
#      volumes:
#        - /tweetsets_data/datasets:/tweetsets_data/datasets
#        # Link in a file containing a message to be displayed on dataset list page, e.g., for other
#        # collections that are available, but not loaded.
#        - "./dataset_list_msg.txt:/opt/tweetsets/dataset_list_msg.txt"
#        # This links in external code.
#        - "..:/opt/tweetsets"
#      networks:
#        - tweetsets
#      environment:
#        - SECRET_KEY=${SERVER_SECRET_KEY}
#        - TZ
#        - SERVER_MODE
#        - IP_RANGE
  worker:
      image: justinlittman/tweetsets-worker
#      build:
#          context: ..
#          dockerfile: Dockerfile-worker
      logging:
          driver: json-file
          options:
              max-size: ${DOCKER_LOG_MAX_SIZE}
              max-file: ${DOCKER_LOG_MAX_FILE}
      links:
        - redis:redis
        - elasticsearch1:elasticsearch
      volumes:
        - ${TWEETSETS_DATA_PATH}/datasets:/tweetsets_data/datasets
      networks:
        - tweetsets
      environment:
        - LOGGING_LEVEL=${WORKER_LOGGING_LEVEL}
        - TZ
      restart: always
  # This will exit. That's OK.
  loader:
      image: justinlittman/tweetsets-loader
#      build:
#          context: ..
#          dockerfile: Dockerfile-loader
      logging:
          driver: json-file
          options:
              max-size: ${DOCKER_LOG_MAX_SIZE}
              max-file: ${DOCKER_LOG_MAX_FILE}
      links:
        - elasticsearch1:elasticsearch
      volumes:
        - ${DATASET_PATH}:/dataset
      networks:
        - tweetsets
      environment:
        - TZ
        - STORE_TWEET
#    # For running with HTTPS
#    # When using this set SERVER_PORT in .env to 8080. Also, make sure HOSTNAME is set correctly.
#    # For more information on configuration of nginx-proxy, see https://github.com/jwilder/nginx-proxy
#  nginx-proxy:
#      image: jwilder/nginx-proxy
#      logging:
#          driver: json-file
#          options:
#              max-size: ${DOCKER_LOG_MAX_SIZE}
#              max-file: ${DOCKER_LOG_MAX_FILE}
#      ports:
#        - "443:443"
#        - "80:80"
#      networks:
#        - tweetsets
#      environment:
#        - DEFAULT_HOST=${HOSTNAME}
#      volumes:
#        - /var/run/docker.sock:/tmp/docker.sock:ro
#        # This should point to your local key and certificate
#        # Make sure in the cert that the server cert comes before the intermediate certs.
#        - "./server.crt:/etc/nginx/certs/${HOSTNAME}.crt"
#        - "./server.key:/etc/nginx/certs/${HOSTNAME}.key"
#      restart: always
networks:
  tweetsets: